{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_http","HttpService","Promise","resolve","reject","get","then","negociacoes","map","Negociacao","Date","objeto","data","quantidade","valor","catch","console","log","erro","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodos","reduce","dados","periodo","concat","Error","negociacao","ConnectionFactory","getConnection","NegociacaoDao","connection","dao","adiciona","error","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","isEquals","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["class NegociacaoService {\r\n    constructor() {\r\n        this._http = new HttpService();\r\n    }\r\n\r\n    obterNegociacoesDaSemana() {\r\n        return new Promise((resolve, reject) => {\r\n            this._http\r\n                .get('negociacoes/semana')\r\n                .then(negociacoes => {\r\n                    resolve(negociacoes\r\n                            .map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n                })\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    reject('Não foi possível obter as negociações da semana');\r\n                });\r\n        });\r\n    }\r\n\r\n    obterNegociacoesDaSemanaAnterior() {\r\n        return new Promise((resolve, reject) => {\r\n            this._http\r\n                .get('negociacoes/anterior')\r\n                .then(negociacoes => {\r\n                    resolve(negociacoes\r\n                            .map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n                })\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    reject('Não foi possível obter as negociações da semana');\r\n                });\r\n        });\r\n    }\r\n\r\n    obterNegociacoesDaSemanaRetrasada() {\r\n        return new Promise((resolve, reject) => {\r\n            this._http\r\n                .get('negociacoes/retrasada')\r\n                .then(negociacoes => {\r\n                    resolve(negociacoes\r\n                            .map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n                })\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    reject('Não foi possível obter as negociações da semana');\r\n                });\r\n        });\r\n    }\r\n\r\n    obterNegociacoes() {\r\n        return Promise.all([\r\n            this.obterNegociacoesDaSemana(),\r\n            this.obterNegociacoesDaSemanaAnterior(),\r\n            this.obterNegociacoesDaSemanaRetrasada()\r\n        ]).then(periodos => {\r\n            let negociacoes = periodos\r\n                .reduce((dados, periodo) => dados.concat(periodo), []);\r\n            return negociacoes;\r\n        }).catch(erro => {\r\n            throw new Error(erro);\r\n        });\r\n    }\r\n\r\n    cadastra(negociacao) {\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.adiciona(negociacao))\r\n            .then(() => 'Negociação adicionada com sucesso.')\r\n            .catch(error => {\r\n                console.log(error);\r\n                throw new Error('Não foi possível adicionar a negociação.');\r\n            });\r\n    }\r\n\r\n    lista() {\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.listaTodos())\r\n            .catch(error => {\r\n                console.log(error);\r\n                throw new Error('Não foi possível obter as negociações.');\r\n            });\r\n    }\r\n\r\n    apaga() {\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.apagaTodos())\r\n            .then(() => 'Negociações apagadas com sucesso')\r\n            .catch(error => {\r\n                console.log(error);\r\n                throw new Error('Não foi possível apagar as negociações.');\r\n            });\r\n    }\r\n\r\n    importa(listaAtual) {\r\n        return this.obterNegociacoes()\r\n                    .then(negociacoes =>\r\n                        negociacoes.filter(negociacao => \r\n                            !listaAtual.some( negociacaoExistente =>\r\n                                negociacao.isEquals(negociacaoExistente)))\r\n                        )\r\n                    .catch(error => {\r\n                        console.log(error);\r\n                        throw new Error('Não foi possível buscar negociações para importar.');\r\n                    });\r\n    }\r\n}\r\n"]}